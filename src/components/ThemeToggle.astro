---
import SunIcon from "../icons/Sun.astro"
import MoonIcon from "../icons/Moon.astro"

const THEMES = ["Light", "Dark"]
---
<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all opacity-100 text-white" />
    <MoonIcon id="dark" class="theme-toggle-icon absolute size-5 transition-all opacity-0 pointer-events-none text-white" />
  </button>

  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }
  @keyframes scale-up-center {
    from { transform: scale(0.8); opacity: 0; }
    to   { transform: scale(1);   opacity: 1; }
  }
</style>

<script is:inline>
  const root = document.documentElement;
  const btn = document.getElementById('theme-toggle-btn');

  const setTheme = (t) => {
    localStorage.setItem('theme', t);            // 'light' | 'dark'
    root.classList.toggle('dark', t === 'dark'); // aplica clase
    document.querySelectorAll('.theme-toggle-icon').forEach(el => {
      const active = el.id === t;
      el.classList.toggle('opacity-100', active);
      el.classList.toggle('opacity-0', !active);
      el.classList.toggle('pointer-events-none', !active);
    });
  };

  const getTheme = () =>
    localStorage.getItem('theme') ||
    (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');

  // Inicial
  setTheme(getTheme());

  // Alternar al click
  btn.addEventListener('click', () => {
    const next = (localStorage.getItem('theme') === 'dark') ? 'light' : 'dark';
    setTheme(next);
  });

  // Reaplica tras navegaciÃ³n con Astro
  document.addEventListener('astro:after-swap', () => setTheme(getTheme()));
</script>